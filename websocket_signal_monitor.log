"""
Simple Telegram Webhook Server for TradingView Alerts
Receives alerts from TradingView and forwards to Telegram
"""

from flask import Flask, request, jsonify
import requests
import os
from datetime import datetime

app = Flask(__name__)

# Get credentials from environment variables (more secure)
TELEGRAM_BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN', 'YOUR_BOT_TOKEN_HERE')
TELEGRAM_CHAT_ID = os.environ.get('TELEGRAM_CHAT_ID', 'YOUR_CHAT_ID_HERE')

@app.route('/webhook', methods=['POST'])
def webhook():
    """Receives alerts from TradingView and forwards to Telegram"""
    try:
        # Get the alert message from TradingView
        data = request.json or request.form.to_dict()
        message = data.get('message', str(data))
        
        # Add timestamp
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        full_message = f"{message}\n\n‚è∞ {timestamp}"
        
        # Send to Telegram
        telegram_url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
        payload = {
            'chat_id': TELEGRAM_CHAT_ID,
            'text': full_message,
            'parse_mode': 'HTML'
        }
        
        response = requests.post(telegram_url, json=payload, timeout=10)
        
        if response.status_code == 200:
            print(f"‚úÖ Alert sent successfully at {timestamp}")
            return jsonify({'status': 'success', 'message': 'Alert sent to Telegram'}), 200
        else:
            print(f"‚ùå Telegram API error: {response.text}")
            return jsonify({'status': 'failed', 'error': response.text}), 500
            
    except Exception as e:
        print(f"‚ùå Error: {str(e)}")
        return jsonify({'status': 'error', 'message': str(e)}), 500

@app.route('/test', methods=['GET'])
def test():
    """Test endpoint to verify webhook is working"""
    return jsonify({
        'status': 'Webhook server is running!',
        'bot_configured': TELEGRAM_BOT_TOKEN != 'YOUR_BOT_TOKEN_HERE',
        'chat_configured': TELEGRAM_CHAT_ID != 'YOUR_CHAT_ID_HERE',
        'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    }), 200

@app.route('/test-telegram', methods=['GET'])
def test_telegram():
    """Send a test message to Telegram"""
    try:
        telegram_url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
        payload = {
            'chat_id': TELEGRAM_CHAT_ID,
            'text': 'üß™ Test message from God Money Machine webhook server!\n\n‚úÖ Connection successful!'
        }
        
        response = requests.post(telegram_url, json=payload, timeout=10)
        
        if response.status_code == 200:
            return jsonify({'status': 'success', 'message': 'Test alert sent to Telegram!'}), 200
        else:
            return jsonify({'status': 'failed', 'error': response.text}), 500
    except Exception as e:
        return jsonify({'status': 'error', 'message': str(e)}), 500

@app.route('/', methods=['GET'])
def home():
    """Home page with instructions"""
    return """
    <h1>üöÄ God Money Machine Telegram Webhook</h1>
    <p><strong>Status:</strong> Server is running!</p>
    <ul>
        <li><a href="/test">Test Server Status</a></li>
        <li><a href="/test-telegram">Send Test Message to Telegram</a></li>
    </ul>
    <h3>Setup Instructions:</h3>
    <ol>
        <li>Use <code>/webhook</code> as your TradingView webhook URL</li>
        <li>In TradingView alert, set webhook body to: <code>{"message": "{{strategy.order.alert_message}}"}</code></li>
        <li>Make sure TELEGRAM_BOT_TOKEN and TELEGRAM_CHAT_ID are set in environment variables</li>
    </ol>
    """

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    print(f"üöÄ Starting webhook server on port {port}...")
    print(f"üì± Telegram Bot Token: {'‚úÖ Configured' if TELEGRAM_BOT_TOKEN != 'YOUR_BOT_TOKEN_HERE' else '‚ùå Not configured'}")
    print(f"üí¨ Telegram Chat ID: {'‚úÖ Configured' if TELEGRAM_CHAT_ID != 'YOUR_CHAT_ID_HERE' else '‚ùå Not configured'}")
    app.run(host='0.0.0.0', port=port, debug=False)
